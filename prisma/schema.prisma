// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mongodb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/referen`ce/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    name String?
    username String? @unique
    bio String? 
    email String? @unique
    emailVerified DateTime?
    image String?
    coverImage String?
    profileImage String?
    hashedPassword String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    followingIds String[] @db.ObjectId
    hasNotification Boolean?

    posts Post[]
    comments Comment[]
    notifications Notification[]
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String @db.ObjectId
    likedIds String @db.ObjectId

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    comments Comment[]
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String @db.ObjectId
    postId String @db.ObjectId


    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    body String
    userId String @db.ObjectId
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}



// Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
